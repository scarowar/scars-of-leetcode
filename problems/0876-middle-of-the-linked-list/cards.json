{
  "problem_id": "0876",
  "problem_title": "Middle Of The Linked List",
  "cards": [
    {
      "front": "[0876] Middle Of The Linked List - What is the main algorithmic pattern used to find the middle node in one pass?",
      "back": "The {{c1::fast and slow pointers}} technique, where fast moves two steps and slow moves one step per iteration.",
      "tags": "linked-list fast-slow-pointers two-pointers algorithm",
      "card_type": "cloze"
    },
    {
      "front": "[0876] Middle Of The Linked List - Fill in the blank: Both pointers start at the __ of the list.",
      "back": "head",
      "tags": "fill-in-the-blank pointer-init linked-list",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - What is the time and space complexity of this approach?",
      "back": "Time: {{c1::O(n)}} for a single traversal. Space: {{c2::O(1)}} since only pointers are used.",
      "tags": "complexity O(n) O(1) linked-list",
      "card_type": "cloze"
    },
    {
      "front": "[0876] Middle Of The Linked List - Step-by-step: How does the fast and slow pointer approach find the middle?",
      "back": "1. Initialize fast and slow pointers at head.\n2. Move fast by two steps and slow by one step each iteration.\n3. When fast reaches the end (or fast.next is None), slow is at the middle.\n4. Return slow.",
      "tags": "step-by-step fast-slow-pointers linked-list algorithm",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - True/False: For even-length lists, this approach returns the first middle node.",
      "back": "False; it returns the second middle node for even-length lists.",
      "tags": "even-length edge-case middle-node linked-list",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - What is a common mistake when using fast and slow pointers?",
      "back": "A common mistake is {{c1::not checking if fast and fast.next are valid}} before advancing, which can cause errors on short or empty lists.",
      "tags": "common-mistake fast-slow-pointers edge-case linked-list",
      "card_type": "cloze"
    },
    {
      "front": "[0876] Middle Of The Linked List - Analogy: How is the fast and slow pointer technique like a race between a rabbit and a turtle?",
      "back": "The rabbit (fast pointer) moves twice as fast as the turtle (slow pointer). When the rabbit finishes, the turtle is at the halfway point (the middle node).",
      "tags": "analogy fast-slow-pointers intuition linked-list",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - Interleaving: Which other problems use a similar fast and slow pointer technique?",
      "back": "Problems like 'Linked List Cycle Detection', 'Remove Nth Node From End Of List', and 'Palindrome Linked List' use similar fast and slow pointer strategies.",
      "tags": "interleaving fast-slow-pointers linked-list",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - Fill in the blank: An alternate approach is to first __ the nodes, then index to the middle.",
      "back": "count",
      "tags": "alternative count fill-in-the-blank linked-list",
      "card_type": "basic"
    },
    {
      "front": "[0876] Middle Of The Linked List - True/False: The solution handles empty and single-node lists correctly.",
      "back": "True; the code returns the correct result for both cases.",
      "tags": "edge-case empty-list single-node correctness linked-list",
      "card_type": "basic"
    }
  ]
}
